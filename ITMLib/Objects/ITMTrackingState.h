#pragma once

#include "ITMLibDefines.h"

#include "ITMPose.h"

/** \brief
	Stores some internal variables about the current tracking
	state, most importantly the camera pose
*/
class ITMTrackingState
{
public:
	/** @brief
		Excerpt of the scene used by the tracker to align
		a new frame.

		This is usually the main result generated by the
		raycasting operation in a ITMLib::Engine::ITMSceneReconstructionEngine.
	*/
    /// Output from visualisationengine for next tracker iteration
    class ITMPointCloud
    {
    public:
        /// The pose used to generate the point cloud.
        ITMPose *pose_pointCloud;

        ORUtils::Image<Vector4f> *locations,
            *normals
            ;

        explicit ITMPointCloud(Vector2i imgSize) : locations(0), normals(0)
        {
            locations = new ORUtils::Image<Vector4f>(imgSize);
            assert((void*)locations != (void*)0xcdcdcdcd00000000);
            assert((void*)locations != (void*)0xcdcdcdcdcdcdcdcd);
            assert(locations);
            normals = new ORUtils::Image<Vector4f>(imgSize);
            assert(normals);

            this->pose_pointCloud = new ITMPose();
        }

        ~ITMPointCloud()
        {
            delete locations;
            delete normals;
            delete pose_pointCloud;
        }
    };
	ITMPointCloud *pointCloud;

	/// Current pose of the depth camera.
	ITMPose *pose_d;

	ITMTrackingState(Vector2i imgSize)
	{
		this->pointCloud = new ITMPointCloud(imgSize);
		this->pose_d = new ITMPose();
	}

	~ITMTrackingState(void)
	{
		delete pointCloud;
		delete pose_d;
	}
};
